import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.callbacks import ModelCheckpoint

# ‚úÖ Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á dataset
dataset_path = 'C:/xampp/htdocs/projectFace/FaceRecognitionProject/dataset'

if not os.path.exists(dataset_path):
    raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dataset ‡∏ó‡∏µ‡πà: {dataset_path}")

# üì¶ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û
datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

train_generator = datagen.flow_from_directory(
    dataset_path,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = datagen.flow_from_directory(
    dataset_path,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# üß† ‡πÇ‡∏´‡∏•‡∏î MobileNetV2 ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏´‡∏±‡∏ß‡πÇ‡∏°‡πÄ‡∏î‡∏• (include_top=False)
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# üîí Freeze layers ‡∏Ç‡∏≠‡∏á base model
for layer in base_model.layers:
    layer.trainable = False

# üß± ‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.3)(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.3)(x)
predictions = Dense(train_generator.num_classes, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)

# ‚öôÔ∏è ‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# üíæ ‡πÄ‡∏ã‡∏ü‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
checkpoint = ModelCheckpoint(
    'face_model_transfer.h5',
    monitor='val_accuracy',
    save_best_only=True,
    verbose=1
)

# üöÄ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator,
    callbacks=[checkpoint]
)

print("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Transfer Learning ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü‡πÑ‡∏ß‡πâ‡πÉ‡∏ô face_model_transfer.h5")
